{"version":3,"sources":["logo.svg","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","firsthandler","event","setState","firstName","target","value","lasthandler","lastName","passwordhandler","password","genderhandler","course","handleSubmit","alert","state","console","log","preventDefault","bind","onSubmit","this","type","onChange","placeholder","defaultValue","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,0KCkF5BC,G,kBA5EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAaVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,UAAWF,EAAMG,OAAOC,SAhBb,EAmBnBC,YAAc,SAACL,GACX,EAAKC,SAAS,CACVK,SAAUN,EAAMG,OAAOC,SArBZ,EAwBnBG,gBAAkB,SAACP,GACf,EAAKC,SAAS,CACVO,SAAUR,EAAMG,OAAOC,SA1BZ,EA8BnBK,cAAgB,SAACT,GACb,EAAKC,SAAS,CACVS,OAAQV,EAAMG,OAAOC,SAhCV,EAoCnBO,aAAe,SAACX,GACZY,MAAM,GAAD,OAAI,EAAKC,MAAMX,UAAf,YAA4B,EAAKW,MAAMP,SAAvC,mCACLQ,QAAQC,IAAI,EAAKF,OACjB,EAAKZ,SAAS,CACVC,UAAW,GACXI,SAAU,GACVE,SAAU,GACVE,OAAQ,KAEfV,EAAMgB,kBA1CH,EAAKH,MAAQ,CACTX,UAAW,GACXI,SAAU,GACVE,SAAU,GACVE,OAAQ,IAIZ,EAAKC,aAAa,EAAKA,aAAaM,KAAlB,gBAXH,E,sEAqDf,OACI,6BAEI,0BAAMC,SAAUC,KAAKR,cACjB,iDACA,gEACA,8CAHJ,IAG+B,2BAAOS,KAAK,OAAOhB,MAAOe,KAAKN,MAAMX,UAAWmB,SAAUF,KAAKpB,aAAcuB,YAAY,iBAAiB,6BACrI,6CAJJ,IAI8B,2BAAOF,KAAK,OAAOhB,MAAOe,KAAKN,MAAMP,SAAUe,SAAUF,KAAKd,YAAaiB,YAAY,gBAAgB,6BACjI,6CALJ,IAK8B,2BAAOF,KAAK,WAAWhB,MAAOe,KAAKN,MAAML,SAAUa,SAAUF,KAAKZ,gBAAiBe,YAAY,gBAAgB,6BACzI,2CAAuB,4BAAQD,SAAUF,KAAKV,cAAec,aAAa,iBACtE,4BAAQA,cAAY,GAApB,iBACA,4BAAQnB,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,WACK,6BACT,2BAAOgB,KAAK,SAAShB,MAAM,iB,GApE5BoB,cCYJC,MAXf,WACE,OAEE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d6867ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\nimport './CSS/todo.css'\n\n\n\nclass Form extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            password: \"\",\n            course: \"\",\n\n\n        }\n        this.handleSubmit=this.handleSubmit.bind(this)\n    }\n\n    firsthandler = (event) => {\n        this.setState({\n            firstName: event.target.value\n        })\n    }\n    lasthandler = (event) => {\n        this.setState({\n            lastName: event.target.value\n        })\n    }\n    passwordhandler = (event) => {\n        this.setState({\n            password: event.target.value\n        })\n    }\n\n    genderhandler = (event) => {\n        this.setState({\n            course: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        alert(`${this.state.firstName} ${this.state.lastName}  Registered Successfully !!!!`)\n        console.log(this.state);\n        this.setState({\n            firstName: \"\",\n            lastName: \"\",\n            password: '',\n            course: \"\",\n        })\n     event.preventDefault()\n        \n    }\n\n\n\n\n    render() {\n        return (\n            <div>\n\n                <form onSubmit={this.handleSubmit}>\n                    <h1>User Registration</h1>\n                    <p>by Mohammed abdullah 20181CSE0426</p>\n                    <label>FirstName :</label> <input type=\"text\" value={this.state.firstName} onChange={this.firsthandler} placeholder=\"FirstName...\" /><br />\n                    <label>LastName :</label> <input type=\"text\" value={this.state.lastName} onChange={this.lasthandler} placeholder=\"LastName...\" /><br />\n                    <label>Password :</label> <input type=\"password\" value={this.state.password} onChange={this.passwordhandler} placeholder=\"Password...\" /><br />\n                    <label>course :</label><select onChange={this.genderhandler} defaultValue=\"Select Gender\">\n                        <option defaultValue>Select course</option>\n                        <option value=\"REACT\">REACT</option>\n                        <option value=\"DJANGO\">DJANGO</option>\n                    </select><br />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n            </div>\n            \n        )\n    }\n}\n\nexport default Form\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Components/Form'\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <Form />\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}